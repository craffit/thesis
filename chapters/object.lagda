\paragraph{Object language representation}
Fundamental to a mechanical formalization of the TTS system is the representation of the object language, STLC. STLC can be represented in multiple ways, as described in~\cite{keuchel11}. The essential choice is between a Higher Order Abstract Syntax and a de Bruijn representation. Although HOAS terms can be constructed in Agda, Agda is not strong enough to reason about semantic equivalence of HOAS terms, unlike other languages such as Twelf~\cite{schurmann08}. The representation chosen here is a first-order representation using well-typed de Bruijn indices as found in Keller and Altenkirch~\cite{keller10}. A first-order formulation is mandatory because it allows full inductive reasoning over terms and types in the object language and thus reasoning about the semantics. Formulating using well-typed de Buijn indices is useful because it asserts important properties about the terms by construction.

\paragraph{de Bruijn indices} Well-typed de Bruijn indices is a way to represent variables in languages based on the lambda calculus. Instead of naming a variable, a variable is given an index which denotes at which lambda the variable is bound. More precisely, the index denotes the number of lambdas that occur between the variable and its binding site. Well-typed de Bruijn indices are almost the same but each variable now also has an assigned type. When a term contains free variables, a context is used to assign each free variable a type and a binding place. Types and contexts are defined in the following way:

%include ../proof/STLC/Context/Base.lagda